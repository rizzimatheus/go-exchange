// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: trade.sql

package db

import (
	"context"
)

const createTrades = `-- name: CreateTrades :one
INSERT INTO trades (first_transfer_id, second_transfer_id) VALUES ($1, $2)
RETURNING id, first_transfer_id, second_transfer_id, created_at
`

type CreateTradesParams struct {
	FirstTransferID  int64 `json:"first_transfer_id"`
	SecondTransferID int64 `json:"second_transfer_id"`
}

func (q *Queries) CreateTrades(ctx context.Context, arg CreateTradesParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrades, arg.FirstTransferID, arg.SecondTransferID)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.FirstTransferID,
		&i.SecondTransferID,
		&i.CreatedAt,
	)
	return i, err
}

const getTrade = `-- name: GetTrade :one
SELECT id, first_transfer_id, second_transfer_id, created_at FROM trades
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTrade(ctx context.Context, id int64) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.FirstTransferID,
		&i.SecondTransferID,
		&i.CreatedAt,
	)
	return i, err
}

const listTrades = `-- name: ListTrades :many
SELECT id, first_transfer_id, second_transfer_id, created_at FROM trades
WHERE first_transfer_id = $1 OR second_transfer_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTradesParams struct {
	FirstTransferID  int64 `json:"first_transfer_id"`
	SecondTransferID int64 `json:"second_transfer_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

func (q *Queries) ListTrades(ctx context.Context, arg ListTradesParams) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, listTrades,
		arg.FirstTransferID,
		arg.SecondTransferID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trade{}
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.FirstTransferID,
			&i.SecondTransferID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
