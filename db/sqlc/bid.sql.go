// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bid.sql

package db

import (
	"context"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bids (pair, from_account_id, to_account_id, price, amount, status) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, pair, from_account_id, to_account_id, price, amount, status, created_at
`

type CreateBidParams struct {
	Pair          string `json:"pair"`
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	Price         int64  `json:"price"`
	Amount        int64  `json:"amount"`
	Status        string `json:"status"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bid, error) {
	row := q.db.QueryRowContext(ctx, createBid,
		arg.Pair,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Price,
		arg.Amount,
		arg.Status,
	)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getBid = `-- name: GetBid :one
SELECT id, pair, from_account_id, to_account_id, price, amount, status, created_at FROM bids
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBid(ctx context.Context, id int64) (Bid, error) {
	row := q.db.QueryRowContext(ctx, getBid, id)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listBids = `-- name: ListBids :many
SELECT id, pair, from_account_id, to_account_id, price, amount, status, created_at FROM bids
WHERE from_account_id = $1 OR to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListBidsParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListBids(ctx context.Context, arg ListBidsParams) ([]Bid, error) {
	rows, err := q.db.QueryContext(ctx, listBids,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bid{}
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.Pair,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Price,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBid = `-- name: UpdateBid :one
UPDATE bids
  SET status = $2
WHERE id = $1
RETURNING id, pair, from_account_id, to_account_id, price, amount, status, created_at
`

type UpdateBidParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateBid(ctx context.Context, arg UpdateBidParams) (Bid, error) {
	row := q.db.QueryRowContext(ctx, updateBid, arg.ID, arg.Status)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
