// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: ask.sql

package db

import (
	"context"
)

const createAsk = `-- name: CreateAsk :one
INSERT INTO asks (pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status, created_at
`

type CreateAskParams struct {
	Pair            string `json:"pair"`
	FromAccountID   int64  `json:"from_account_id"`
	ToAccountID     int64  `json:"to_account_id"`
	Price           int64  `json:"price"`
	InitialAmount   int64  `json:"initial_amount"`
	RemainingAmount int64  `json:"remaining_amount"`
	Status          string `json:"status"`
}

func (q *Queries) CreateAsk(ctx context.Context, arg CreateAskParams) (Ask, error) {
	row := q.db.QueryRowContext(ctx, createAsk,
		arg.Pair,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Price,
		arg.InitialAmount,
		arg.RemainingAmount,
		arg.Status,
	)
	var i Ask
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.InitialAmount,
		&i.RemainingAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAsk = `-- name: GetAsk :one
SELECT id, pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status, created_at FROM asks
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAsk(ctx context.Context, id int64) (Ask, error) {
	row := q.db.QueryRowContext(ctx, getAsk, id)
	var i Ask
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.InitialAmount,
		&i.RemainingAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAllAsks = `-- name: ListAllAsks :many
SELECT id, pair, price, initial_amount, remaining_amount FROM asks
WHERE pair = $1
ORDER BY price ASC
LIMIT $2
OFFSET $3
`

type ListAllAsksParams struct {
	Pair   string `json:"pair"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListAllAsksRow struct {
	ID              int64  `json:"id"`
	Pair            string `json:"pair"`
	Price           int64  `json:"price"`
	InitialAmount   int64  `json:"initial_amount"`
	RemainingAmount int64  `json:"remaining_amount"`
}

func (q *Queries) ListAllAsks(ctx context.Context, arg ListAllAsksParams) ([]ListAllAsksRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllAsks, arg.Pair, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllAsksRow{}
	for rows.Next() {
		var i ListAllAsksRow
		if err := rows.Scan(
			&i.ID,
			&i.Pair,
			&i.Price,
			&i.InitialAmount,
			&i.RemainingAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAsks = `-- name: ListAsks :many
SELECT id, pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status, created_at FROM asks
WHERE from_account_id = $1 OR to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListAsksParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListAsks(ctx context.Context, arg ListAsksParams) ([]Ask, error) {
	rows, err := q.db.QueryContext(ctx, listAsks,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ask{}
	for rows.Next() {
		var i Ask
		if err := rows.Scan(
			&i.ID,
			&i.Pair,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Price,
			&i.InitialAmount,
			&i.RemainingAmount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradableAsks = `-- name: ListTradableAsks :many
SELECT id, pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status, created_at FROM asks
WHERE status = 'active' AND pair = $1 AND price <= $2
ORDER BY price DESC
LIMIT $3
OFFSET $4
`

type ListTradableAsksParams struct {
	Pair   string `json:"pair"`
	Price  int64  `json:"price"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListTradableAsks(ctx context.Context, arg ListTradableAsksParams) ([]Ask, error) {
	rows, err := q.db.QueryContext(ctx, listTradableAsks,
		arg.Pair,
		arg.Price,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ask{}
	for rows.Next() {
		var i Ask
		if err := rows.Scan(
			&i.ID,
			&i.Pair,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Price,
			&i.InitialAmount,
			&i.RemainingAmount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAsk = `-- name: UpdateAsk :one
UPDATE asks
SET 
  status = $2,
  remaining_amount = $3
WHERE id = $1
RETURNING id, pair, from_account_id, to_account_id, price, initial_amount, remaining_amount, status, created_at
`

type UpdateAskParams struct {
	ID              int64  `json:"id"`
	Status          string `json:"status"`
	RemainingAmount int64  `json:"remaining_amount"`
}

func (q *Queries) UpdateAsk(ctx context.Context, arg UpdateAskParams) (Ask, error) {
	row := q.db.QueryRowContext(ctx, updateAsk, arg.ID, arg.Status, arg.RemainingAmount)
	var i Ask
	err := row.Scan(
		&i.ID,
		&i.Pair,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Price,
		&i.InitialAmount,
		&i.RemainingAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
